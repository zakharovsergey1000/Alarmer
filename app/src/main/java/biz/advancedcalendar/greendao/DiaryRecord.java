package biz.advancedcalendar.greendao;

import java.util.List;
import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DIARY_RECORD.
 */
public class DiaryRecord implements java.io.Serializable {

    private Long id;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private byte SyncStatus;
    private Long ServerId;
    private boolean Deleted;
    private long Date;
    private Long StartTime;
    private Long EndTime;
    private Long LocalTaskId;
    private Boolean TaskDeleted;
    private Boolean LabelDeleted;
    private boolean IsWasteTime;
    private boolean WasCompleted;
    private String Text;
    private String FullText;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DiaryRecordDao myDao;

    private Task task;
    private Long task__resolvedKey;

    private List<DiaryRecordLabel> diaryRecordLabelList;

    public DiaryRecord() {
    }

    public DiaryRecord(Long id) {
        this.id = id;
    }

    public DiaryRecord(Long id, long LocalCreateDateTime, long LocalChangeDateTime, byte SyncStatus, Long ServerId, boolean Deleted, long Date, Long StartTime, Long EndTime, Long LocalTaskId, Boolean TaskDeleted, Boolean LabelDeleted, boolean IsWasteTime, boolean WasCompleted, String Text, String FullText) {
        this.id = id;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.SyncStatus = SyncStatus;
        this.ServerId = ServerId;
        this.Deleted = Deleted;
        this.Date = Date;
        this.StartTime = StartTime;
        this.EndTime = EndTime;
        this.LocalTaskId = LocalTaskId;
        this.TaskDeleted = TaskDeleted;
        this.LabelDeleted = LabelDeleted;
        this.IsWasteTime = IsWasteTime;
        this.WasCompleted = WasCompleted;
        this.Text = Text;
        this.FullText = FullText;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDiaryRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public byte getSyncStatus() {
        return SyncStatus;
    }

    public void setSyncStatus(byte SyncStatus) {
        this.SyncStatus = SyncStatus;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public boolean getDeleted() {
        return Deleted;
    }

    public void setDeleted(boolean Deleted) {
        this.Deleted = Deleted;
    }

    public long getDate() {
        return Date;
    }

    public void setDate(long Date) {
        this.Date = Date;
    }

    public Long getStartTime() {
        return StartTime;
    }

    public void setStartTime(Long StartTime) {
        this.StartTime = StartTime;
    }

    public Long getEndTime() {
        return EndTime;
    }

    public void setEndTime(Long EndTime) {
        this.EndTime = EndTime;
    }

    public Long getLocalTaskId() {
        return LocalTaskId;
    }

    public void setLocalTaskId(Long LocalTaskId) {
        this.LocalTaskId = LocalTaskId;
    }

    public Boolean getTaskDeleted() {
        return TaskDeleted;
    }

    public void setTaskDeleted(Boolean TaskDeleted) {
        this.TaskDeleted = TaskDeleted;
    }

    public Boolean getLabelDeleted() {
        return LabelDeleted;
    }

    public void setLabelDeleted(Boolean LabelDeleted) {
        this.LabelDeleted = LabelDeleted;
    }

    public boolean getIsWasteTime() {
        return IsWasteTime;
    }

    public void setIsWasteTime(boolean IsWasteTime) {
        this.IsWasteTime = IsWasteTime;
    }

    public boolean getWasCompleted() {
        return WasCompleted;
    }

    public void setWasCompleted(boolean WasCompleted) {
        this.WasCompleted = WasCompleted;
    }

    public String getText() {
        return Text;
    }

    public void setText(String Text) {
        this.Text = Text;
    }

    public String getFullText() {
        return FullText;
    }

    public void setFullText(String FullText) {
        this.FullText = FullText;
    }

    /** To-one relationship, resolved on first access. */
    public Task getTask() {
        Long __key = this.LocalTaskId;
        if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task taskNew = targetDao.load(__key);
            synchronized (this) {
                task = taskNew;
            	task__resolvedKey = __key;
            }
        }
        return task;
    }

    public void setTask(Task task) {
        synchronized (this) {
            this.task = task;
            LocalTaskId = task == null ? null : task.getId();
            task__resolvedKey = LocalTaskId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DiaryRecordLabel> getDiaryRecordLabelList() {
        if (diaryRecordLabelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DiaryRecordLabelDao targetDao = daoSession.getDiaryRecordLabelDao();
            List<DiaryRecordLabel> diaryRecordLabelListNew = targetDao._queryDiaryRecord_DiaryRecordLabelList(id);
            synchronized (this) {
                if(diaryRecordLabelList == null) {
                    diaryRecordLabelList = diaryRecordLabelListNew;
                }
            }
        }
        return diaryRecordLabelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDiaryRecordLabelList() {
        diaryRecordLabelList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
