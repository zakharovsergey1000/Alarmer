package biz.advancedcalendar.greendao;

import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONTACT_DATA.
 */
public class ContactData implements java.io.Serializable {

    private Long id;
    private Long ServerId;
    private Long LocalContactId;
    private Short Type;
    private String Value;
    private String Name;
    private Integer SortOrder;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDataDao myDao;

    private Contact contact;
    private Long contact__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	public enum TYPE {
		PHONE_CELLULAR(0), PHONE_COMPANY(5), PHONE_CELLULAR_2(15), FAX(30), FAX_COMPANY(35), PHONE_COMPANY_2(
				20), PHONE_HOME(10), PHONE_HOME_2(25), EMAIL(50), EMAIL_PERSONAL(55), EMAIL_PERSONAL_2(
				65), EMAIL_COMPANY(60), EMAIL_COMPANY_2(70), ICQ(100), FACEBOOK(145), MAIL_AGENT(
				110), QIP(101), MSN(115), GOOGLE_TALK(140), LIVE_JOURNAL(130), PERSONAL_SITE(
				155), PERSONAL_SITE_2(160), SKYPE(105), TWITTER(150), JABBER(120), ADDRESS(
				250), ADDRESS_2(255), LEGAL_ADDRESS(260), COMPANY(265), OCCUPATION(261), FIELD_1(
				200), FIELD_2(201), FIELD_3(202), FIELD_4(203), FIELD_5(204), FIELD_6(205);
		private int value;

		private TYPE(int value) {
			this.value = value;
		}

		/** @return the value */
		public Short getValue() {
			return (short) value;
		}

		public static TYPE fromInt(int x) {
			switch (x) {
			case 0:
				return PHONE_CELLULAR;
			case 5:
				return PHONE_COMPANY;
			case 15:
				return PHONE_CELLULAR_2;
			case 30:
				return FAX;
			case 35:
				return FAX_COMPANY;
			case 20:
				return PHONE_COMPANY_2;
			case 10:
				return PHONE_HOME;
			case 25:
				return PHONE_HOME_2;
			case 50:
				return EMAIL;
			case 55:
				return EMAIL_PERSONAL;
			case 65:
				return EMAIL_PERSONAL_2;
			case 60:
				return EMAIL_COMPANY;
			case 70:
				return EMAIL_COMPANY_2;
			case 100:
				return ICQ;
			case 145:
				return FACEBOOK;
			case 110:
				return MAIL_AGENT;
			case 101:
				return QIP;
			case 115:
				return MSN;
			case 140:
				return GOOGLE_TALK;
			case 130:
				return LIVE_JOURNAL;
			case 155:
				return PERSONAL_SITE;
			case 160:
				return PERSONAL_SITE_2;
			case 105:
				return SKYPE;
			case 150:
				return TWITTER;
			case 120:
				return JABBER;
			case 250:
				return ADDRESS;
			case 255:
				return ADDRESS_2;
			case 260:
				return LEGAL_ADDRESS;
			case 265:
				return COMPANY;
			case 261:
				return OCCUPATION;
			case 200:
				return FIELD_1;
			case 201:
				return FIELD_2;
			case 202:
				return FIELD_3;
			case 203:
				return FIELD_4;
			case 204:
				return FIELD_5;
			case 205:
				return FIELD_6;
			}
			return null;
		}
	}
    // KEEP FIELDS END

    public ContactData() {
    }

    public ContactData(Long id) {
        this.id = id;
    }

    public ContactData(Long id, Long ServerId, Long LocalContactId, Short Type, String Value, String Name, Integer SortOrder) {
        this.id = id;
        this.ServerId = ServerId;
        this.LocalContactId = LocalContactId;
        this.Type = Type;
        this.Value = Value;
        this.Name = Name;
        this.SortOrder = SortOrder;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public Long getLocalContactId() {
        return LocalContactId;
    }

    public void setLocalContactId(Long LocalContactId) {
        this.LocalContactId = LocalContactId;
    }

    public Short getType() {
        return Type;
    }

    public void setType(Short Type) {
        this.Type = Type;
    }

    public String getValue() {
        return Value;
    }

    public void setValue(String Value) {
        this.Value = Value;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Integer getSortOrder() {
        return SortOrder;
    }

    public void setSortOrder(Integer SortOrder) {
        this.SortOrder = SortOrder;
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        Long __key = this.LocalContactId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            LocalContactId = contact == null ? null : contact.getId();
            contact__resolvedKey = LocalContactId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
