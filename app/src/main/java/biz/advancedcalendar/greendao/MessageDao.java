package biz.advancedcalendar.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import biz.advancedcalendar.greendao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalWorkgroupId = new Property(1, long.class, "LocalWorkgroupId", false, "LOCAL_WORKGROUP_ID");
        public final static Property LocalCreateDateTime = new Property(2, long.class, "LocalCreateDateTime", false, "LOCAL_CREATE_DATE_TIME");
        public final static Property LocalChangeDateTime = new Property(3, long.class, "LocalChangeDateTime", false, "LOCAL_CHANGE_DATE_TIME");
        public final static Property SyncStatus = new Property(4, Byte.class, "SyncStatus", false, "SYNC_STATUS");
        public final static Property ServerId = new Property(5, Long.class, "ServerId", false, "SERVER_ID");
        public final static Property Deleted = new Property(6, boolean.class, "Deleted", false, "DELETED");
        public final static Property WorkgroupId = new Property(7, Long.class, "WorkgroupId", false, "WORKGROUP_ID");
        public final static Property FromUser = new Property(8, long.class, "FromUser", false, "FROM_USER");
        public final static Property ToUser = new Property(9, Long.class, "ToUser", false, "TO_USER");
        public final static Property Type = new Property(10, short.class, "Type", false, "TYPE");
        public final static Property Date = new Property(11, long.class, "Date", false, "DATE");
        public final static Property Status = new Property(12, short.class, "Status", false, "STATUS");
        public final static Property Text = new Property(13, String.class, "Text", false, "TEXT");
        public final static Property DiscussionId = new Property(14, Long.class, "DiscussionId", false, "DISCUSSION_ID");
    };

    private DaoSession daoSession;

    private Query<Message> workGroup_MessageListQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_WORKGROUP_ID' INTEGER NOT NULL ," + // 1: LocalWorkgroupId
                "'LOCAL_CREATE_DATE_TIME' INTEGER NOT NULL ," + // 2: LocalCreateDateTime
                "'LOCAL_CHANGE_DATE_TIME' INTEGER NOT NULL ," + // 3: LocalChangeDateTime
                "'SYNC_STATUS' INTEGER," + // 4: SyncStatus
                "'SERVER_ID' INTEGER," + // 5: ServerId
                "'DELETED' INTEGER NOT NULL ," + // 6: Deleted
                "'WORKGROUP_ID' INTEGER," + // 7: WorkgroupId
                "'FROM_USER' INTEGER NOT NULL ," + // 8: FromUser
                "'TO_USER' INTEGER," + // 9: ToUser
                "'TYPE' INTEGER NOT NULL ," + // 10: Type
                "'DATE' INTEGER NOT NULL ," + // 11: Date
                "'STATUS' INTEGER NOT NULL ," + // 12: Status
                "'TEXT' TEXT," + // 13: Text
                "'DISCUSSION_ID' INTEGER);"); // 14: DiscussionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalWorkgroupId());
        stmt.bindLong(3, entity.getLocalCreateDateTime());
        stmt.bindLong(4, entity.getLocalChangeDateTime());
 
        Byte SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(5, SyncStatus);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(6, ServerId);
        }
        stmt.bindLong(7, entity.getDeleted() ? 1l: 0l);
 
        Long WorkgroupId = entity.getWorkgroupId();
        if (WorkgroupId != null) {
            stmt.bindLong(8, WorkgroupId);
        }
        stmt.bindLong(9, entity.getFromUser());
 
        Long ToUser = entity.getToUser();
        if (ToUser != null) {
            stmt.bindLong(10, ToUser);
        }
        stmt.bindLong(11, entity.getType());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getStatus());
 
        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(14, Text);
        }
 
        Long DiscussionId = entity.getDiscussionId();
        if (DiscussionId != null) {
            stmt.bindLong(15, DiscussionId);
        }
    }

    @Override
    protected void attachEntity(Message entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // LocalWorkgroupId
            cursor.getLong(offset + 2), // LocalCreateDateTime
            cursor.getLong(offset + 3), // LocalChangeDateTime
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4), // SyncStatus
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ServerId
            cursor.getShort(offset + 6) != 0, // Deleted
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // WorkgroupId
            cursor.getLong(offset + 8), // FromUser
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // ToUser
            cursor.getShort(offset + 10), // Type
            cursor.getLong(offset + 11), // Date
            cursor.getShort(offset + 12), // Status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Text
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // DiscussionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalWorkgroupId(cursor.getLong(offset + 1));
        entity.setLocalCreateDateTime(cursor.getLong(offset + 2));
        entity.setLocalChangeDateTime(cursor.getLong(offset + 3));
        entity.setSyncStatus(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
        entity.setServerId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDeleted(cursor.getShort(offset + 6) != 0);
        entity.setWorkgroupId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFromUser(cursor.getLong(offset + 8));
        entity.setToUser(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setType(cursor.getShort(offset + 10));
        entity.setDate(cursor.getLong(offset + 11));
        entity.setStatus(cursor.getShort(offset + 12));
        entity.setText(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDiscussionId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messageList" to-many relationship of WorkGroup. */
    public List<Message> _queryWorkGroup_MessageList(long LocalWorkgroupId) {
        synchronized (this) {
            if (workGroup_MessageListQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LocalWorkgroupId.eq(null));
                workGroup_MessageListQuery = queryBuilder.build();
            }
        }
        Query<Message> query = workGroup_MessageListQuery.forCurrentThread();
        query.setParameter(0, LocalWorkgroupId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkGroupDao().getAllColumns());
            builder.append(" FROM MESSAGE T");
            builder.append(" LEFT JOIN WORK_GROUP T0 ON T.'LOCAL_WORKGROUP_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Message loadCurrentDeep(Cursor cursor, boolean lock) {
        Message entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WorkGroup workGroup = loadCurrentOther(daoSession.getWorkGroupDao(), cursor, offset);
         if(workGroup != null) {
            entity.setWorkGroup(workGroup);
        }

        return entity;    
    }

    public Message loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Message> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Message> list = new ArrayList<Message>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Message> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Message> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
