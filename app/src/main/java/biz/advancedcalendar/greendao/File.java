package biz.advancedcalendar.greendao;

import java.util.List;
import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FILE.
 */
public class File implements java.io.Serializable {

    private Long id;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private Byte SyncStatus;
    private String LocalPath;
    private Long LocalId;
    private Long LocalVersionId;
    private Long ServerId;
    private Long VersionId;
    private String Href;
    private String UID;
    private String UserName;
    private String FileName;
    private String ContentType;
    private Long Size;
    private String Description;
    private long FileServerId;
    private Long Created;
    private boolean Deleted;
    private boolean EnableVersions;
    private String Path;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FileDao myDao;

    private List<FileTask> fileTaskList;
    private List<FileLabel> fileLabelList;
    private List<FileContact> fileContactList;

    public File() {
    }

    public File(Long id) {
        this.id = id;
    }

    public File(Long id, long LocalCreateDateTime, long LocalChangeDateTime, Byte SyncStatus, String LocalPath, Long LocalId, Long LocalVersionId, Long ServerId, Long VersionId, String Href, String UID, String UserName, String FileName, String ContentType, Long Size, String Description, long FileServerId, Long Created, boolean Deleted, boolean EnableVersions, String Path) {
        this.id = id;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.SyncStatus = SyncStatus;
        this.LocalPath = LocalPath;
        this.LocalId = LocalId;
        this.LocalVersionId = LocalVersionId;
        this.ServerId = ServerId;
        this.VersionId = VersionId;
        this.Href = Href;
        this.UID = UID;
        this.UserName = UserName;
        this.FileName = FileName;
        this.ContentType = ContentType;
        this.Size = Size;
        this.Description = Description;
        this.FileServerId = FileServerId;
        this.Created = Created;
        this.Deleted = Deleted;
        this.EnableVersions = EnableVersions;
        this.Path = Path;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFileDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public Byte getSyncStatus() {
        return SyncStatus;
    }

    public void setSyncStatus(Byte SyncStatus) {
        this.SyncStatus = SyncStatus;
    }

    public String getLocalPath() {
        return LocalPath;
    }

    public void setLocalPath(String LocalPath) {
        this.LocalPath = LocalPath;
    }

    public Long getLocalId() {
        return LocalId;
    }

    public void setLocalId(Long LocalId) {
        this.LocalId = LocalId;
    }

    public Long getLocalVersionId() {
        return LocalVersionId;
    }

    public void setLocalVersionId(Long LocalVersionId) {
        this.LocalVersionId = LocalVersionId;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public Long getVersionId() {
        return VersionId;
    }

    public void setVersionId(Long VersionId) {
        this.VersionId = VersionId;
    }

    public String getHref() {
        return Href;
    }

    public void setHref(String Href) {
        this.Href = Href;
    }

    public String getUID() {
        return UID;
    }

    public void setUID(String UID) {
        this.UID = UID;
    }

    public String getUserName() {
        return UserName;
    }

    public void setUserName(String UserName) {
        this.UserName = UserName;
    }

    public String getFileName() {
        return FileName;
    }

    public void setFileName(String FileName) {
        this.FileName = FileName;
    }

    public String getContentType() {
        return ContentType;
    }

    public void setContentType(String ContentType) {
        this.ContentType = ContentType;
    }

    public Long getSize() {
        return Size;
    }

    public void setSize(Long Size) {
        this.Size = Size;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    public long getFileServerId() {
        return FileServerId;
    }

    public void setFileServerId(long FileServerId) {
        this.FileServerId = FileServerId;
    }

    public Long getCreated() {
        return Created;
    }

    public void setCreated(Long Created) {
        this.Created = Created;
    }

    public boolean getDeleted() {
        return Deleted;
    }

    public void setDeleted(boolean Deleted) {
        this.Deleted = Deleted;
    }

    public boolean getEnableVersions() {
        return EnableVersions;
    }

    public void setEnableVersions(boolean EnableVersions) {
        this.EnableVersions = EnableVersions;
    }

    public String getPath() {
        return Path;
    }

    public void setPath(String Path) {
        this.Path = Path;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FileTask> getFileTaskList() {
        if (fileTaskList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileTaskDao targetDao = daoSession.getFileTaskDao();
            List<FileTask> fileTaskListNew = targetDao._queryFile_FileTaskList(id);
            synchronized (this) {
                if(fileTaskList == null) {
                    fileTaskList = fileTaskListNew;
                }
            }
        }
        return fileTaskList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileTaskList() {
        fileTaskList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FileLabel> getFileLabelList() {
        if (fileLabelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileLabelDao targetDao = daoSession.getFileLabelDao();
            List<FileLabel> fileLabelListNew = targetDao._queryFile_FileLabelList(id);
            synchronized (this) {
                if(fileLabelList == null) {
                    fileLabelList = fileLabelListNew;
                }
            }
        }
        return fileLabelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileLabelList() {
        fileLabelList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FileContact> getFileContactList() {
        if (fileContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileContactDao targetDao = daoSession.getFileContactDao();
            List<FileContact> fileContactListNew = targetDao._queryFile_FileContactList(id);
            synchronized (this) {
                if(fileContactList == null) {
                    fileContactList = fileContactListNew;
                }
            }
        }
        return fileContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileContactList() {
        fileContactList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
