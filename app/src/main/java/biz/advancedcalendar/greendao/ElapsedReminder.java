package biz.advancedcalendar.greendao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
import android.content.Context;
import android.media.RingtoneManager;
import biz.advancedcalendar.alarmer.R;
import biz.advancedcalendar.db.DataProvider;
import biz.advancedcalendar.utils.Helper;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.query.QueryBuilder;

// KEEP INCLUDES END
/** Entity mapped to table ELAPSED_REMINDER. */
public class ElapsedReminder {
	private Long id;
	private Long reminderId;
	private Long scheduledReminderId;
	private Long assignedRemindAtDateTime;
	private long actualLastAlarmedDateTime;
	private int snoozeCount;
	/** Not-null value. */
	private String text;
	private boolean isAlarm;
	private boolean showInNotifications;
	private boolean wasEnabled;
	private String ringtone;
	private Long ringtoneFadeInTime;
	private Integer playingTime;
	private Integer automaticSnoozeDuration;
	private Integer automaticSnoozesMaxCount;
	private Boolean vibrate;
	private String vibratePattern;
	private Boolean led;
	private String ledPattern;
	private Integer ledColor;
	/** Used to resolve relations */
	private transient DaoSession daoSession;
	/** Used for active entity operations. */
	private transient ElapsedReminderDao myDao;
	private Reminder reminder;
	private Long reminder__resolvedKey;
	private ScheduledReminder scheduledReminder;
	private Long scheduledReminder__resolvedKey;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END
	public ElapsedReminder() {
	}

	public ElapsedReminder(Long id) {
		this.id = id;
	}

	public ElapsedReminder(Long id, Long reminderId, Long scheduledReminderId,
			Long assignedRemindAtDateTime, long actualLastAlarmedDateTime,
			int snoozeCount, String text, boolean isAlarm, boolean showInNotifications,
			boolean wasEnabled, String ringtone, Long ringtoneFadeInTime,
			Integer playingTime, Integer automaticSnoozeDuration,
			Integer automaticSnoozesMaxCount, Boolean vibrate, String vibratePattern,
			Boolean led, String ledPattern, Integer ledColor) {
		this.id = id;
		this.reminderId = reminderId;
		this.scheduledReminderId = scheduledReminderId;
		this.assignedRemindAtDateTime = assignedRemindAtDateTime;
		this.actualLastAlarmedDateTime = actualLastAlarmedDateTime;
		this.snoozeCount = snoozeCount;
		this.text = text;
		this.isAlarm = isAlarm;
		this.showInNotifications = showInNotifications;
		this.wasEnabled = wasEnabled;
		this.ringtone = ringtone;
		this.ringtoneFadeInTime = ringtoneFadeInTime;
		this.playingTime = playingTime;
		this.automaticSnoozeDuration = automaticSnoozeDuration;
		this.automaticSnoozesMaxCount = automaticSnoozesMaxCount;
		this.vibrate = vibrate;
		this.vibratePattern = vibratePattern;
		this.led = led;
		this.ledPattern = ledPattern;
		this.ledColor = ledColor;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getElapsedReminderDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getReminderId() {
		return reminderId;
	}

	public void setReminderId(Long reminderId) {
		this.reminderId = reminderId;
	}

	public Long getScheduledReminderId() {
		return scheduledReminderId;
	}

	public void setScheduledReminderId(Long scheduledReminderId) {
		this.scheduledReminderId = scheduledReminderId;
	}

	public Long getAssignedRemindAtDateTime() {
		return assignedRemindAtDateTime;
	}

	public void setAssignedRemindAtDateTime(Long assignedRemindAtDateTime) {
		this.assignedRemindAtDateTime = assignedRemindAtDateTime;
	}

	public long getActualLastAlarmedDateTime() {
		return actualLastAlarmedDateTime;
	}

	public void setActualLastAlarmedDateTime(long actualLastAlarmedDateTime) {
		this.actualLastAlarmedDateTime = actualLastAlarmedDateTime;
	}

	public int getSnoozeCount() {
		return snoozeCount;
	}

	public void setSnoozeCount(int snoozeCount) {
		this.snoozeCount = snoozeCount;
	}

	/** Not-null value. */
	public String getText() {
		return text;
	}

	/** Not-null value; ensure this value is available before it is saved to the database. */
	public void setText(String text) {
		this.text = text;
	}

	public boolean getIsAlarm() {
		return isAlarm;
	}

	public void setIsAlarm(boolean isAlarm) {
		this.isAlarm = isAlarm;
	}

	public boolean getShowInNotifications() {
		return showInNotifications;
	}

	public void setShowInNotifications(boolean showInNotifications) {
		this.showInNotifications = showInNotifications;
	}

	public boolean getWasEnabled() {
		return wasEnabled;
	}

	public void setWasEnabled(boolean wasEnabled) {
		this.wasEnabled = wasEnabled;
	}

	public String getRingtone() {
		return ringtone;
	}

	public void setRingtone(String ringtone) {
		this.ringtone = ringtone;
	}

	public Long getRingtoneFadeInTime() {
		return ringtoneFadeInTime;
	}

	public void setRingtoneFadeInTime(Long ringtoneFadeInTime) {
		this.ringtoneFadeInTime = ringtoneFadeInTime;
	}

	public Integer getPlayingTime() {
		return playingTime;
	}

	public void setPlayingTime(Integer playingTime) {
		this.playingTime = playingTime;
	}

	public Integer getAutomaticSnoozeDuration() {
		return automaticSnoozeDuration;
	}

	public void setAutomaticSnoozeDuration(Integer automaticSnoozeDuration) {
		this.automaticSnoozeDuration = automaticSnoozeDuration;
	}

	public Integer getAutomaticSnoozesMaxCount() {
		return automaticSnoozesMaxCount;
	}

	public void setAutomaticSnoozesMaxCount(Integer automaticSnoozesMaxCount) {
		this.automaticSnoozesMaxCount = automaticSnoozesMaxCount;
	}

	public Boolean getVibrate() {
		return vibrate;
	}

	public void setVibrate(Boolean vibrate) {
		this.vibrate = vibrate;
	}

	public String getVibratePattern() {
		return vibratePattern;
	}

	public void setVibratePattern(String vibratePattern) {
		this.vibratePattern = vibratePattern;
	}

	public Boolean getLed() {
		return led;
	}

	public void setLed(Boolean led) {
		this.led = led;
	}

	public String getLedPattern() {
		return ledPattern;
	}

	public void setLedPattern(String ledPattern) {
		this.ledPattern = ledPattern;
	}

	public Integer getLedColor() {
		return ledColor;
	}

	public void setLedColor(Integer ledColor) {
		this.ledColor = ledColor;
	}

	/** To-one relationship, resolved on first access. */
	public Reminder getReminder() {
		Long __key = reminderId;
		if (reminder__resolvedKey == null || !reminder__resolvedKey.equals(__key)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			ReminderDao targetDao = daoSession.getReminderDao();
			Reminder reminderNew = targetDao.load(__key);
			synchronized (this) {
				reminder = reminderNew;
				reminder__resolvedKey = __key;
			}
		}
		return reminder;
	}

	public void setReminder(Reminder reminder) {
		synchronized (this) {
			this.reminder = reminder;
			reminderId = reminder == null ? null : reminder.getId();
			reminder__resolvedKey = reminderId;
		}
	}

	/** To-one relationship, resolved on first access. */
	public ScheduledReminder getScheduledReminder() {
		Long __key = scheduledReminderId;
		if (scheduledReminder__resolvedKey == null
				|| !scheduledReminder__resolvedKey.equals(__key)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			ScheduledReminderDao targetDao = daoSession.getScheduledReminderDao();
			ScheduledReminder scheduledReminderNew = targetDao.load(__key);
			synchronized (this) {
				scheduledReminder = scheduledReminderNew;
				scheduledReminder__resolvedKey = __key;
			}
		}
		return scheduledReminder;
	}

	public void setScheduledReminder(ScheduledReminder scheduledReminder) {
		synchronized (this) {
			this.scheduledReminder = scheduledReminder;
			scheduledReminderId = scheduledReminder == null ? null : scheduledReminder
					.getId();
			scheduledReminder__resolvedKey = scheduledReminderId;
		}
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an
	 * entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an
	 * entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an
	 * entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	// KEEP METHODS - put your custom methods here
	public ScheduledReminder getScheduledReminder2(Context context) {
		return DataProvider.getScheduledReminder(null, context, scheduledReminderId);
	}

	public Reminder getReminder(DaoSession daoSession) {
		if (reminderId == null) {
			return null;
		}
		ReminderDao dao = daoSession.getReminderDao();
		QueryBuilder<Reminder> qb = dao.queryBuilder();
		qb.where(ReminderDao.Properties.Id.eq(reminderId));
		Reminder entity = qb.unique();
		return entity;
	}

	public String getRingtone(Context context, DaoSession daoSession) {
		if (ringtone != null) {
			return ringtone;
		} else {
			int preferenceId;
			int ringtoneType;
			if (isAlarm) {
				preferenceId = R.string.preference_key_alarm_ringtone;
				ringtoneType = RingtoneManager.TYPE_ALARM;
			} else {
				preferenceId = R.string.preference_key_notification_ringtone;
				ringtoneType = RingtoneManager.TYPE_NOTIFICATION;
			}
			Reminder reminder = getReminder(daoSession);
			if (reminder != null) {
				return reminder.getRingtone2(context, preferenceId);
			} else {
				return Helper.getStringPreferenceValue(context, context.getResources()
						.getString(preferenceId),
						RingtoneManager.getDefaultUri(ringtoneType).toString());
			}
		}
	}
	// KEEP METHODS END
}
