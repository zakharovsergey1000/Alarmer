package biz.advancedcalendar.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import biz.advancedcalendar.greendao.DiaryRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DIARY_RECORD.
*/
public class DiaryRecordDao extends AbstractDao<DiaryRecord, Long> {

    public static final String TABLENAME = "DIARY_RECORD";

    /**
     * Properties of entity DiaryRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalCreateDateTime = new Property(1, long.class, "LocalCreateDateTime", false, "LOCAL_CREATE_DATE_TIME");
        public final static Property LocalChangeDateTime = new Property(2, long.class, "LocalChangeDateTime", false, "LOCAL_CHANGE_DATE_TIME");
        public final static Property SyncStatus = new Property(3, byte.class, "SyncStatus", false, "SYNC_STATUS");
        public final static Property ServerId = new Property(4, Long.class, "ServerId", false, "SERVER_ID");
        public final static Property Deleted = new Property(5, boolean.class, "Deleted", false, "DELETED");
        public final static Property Date = new Property(6, long.class, "Date", false, "DATE");
        public final static Property StartTime = new Property(7, Long.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, Long.class, "EndTime", false, "END_TIME");
        public final static Property LocalTaskId = new Property(9, Long.class, "LocalTaskId", false, "LOCAL_TASK_ID");
        public final static Property TaskDeleted = new Property(10, Boolean.class, "TaskDeleted", false, "TASK_DELETED");
        public final static Property LabelDeleted = new Property(11, Boolean.class, "LabelDeleted", false, "LABEL_DELETED");
        public final static Property IsWasteTime = new Property(12, boolean.class, "IsWasteTime", false, "IS_WASTE_TIME");
        public final static Property WasCompleted = new Property(13, boolean.class, "WasCompleted", false, "WAS_COMPLETED");
        public final static Property Text = new Property(14, String.class, "Text", false, "TEXT");
        public final static Property FullText = new Property(15, String.class, "FullText", false, "FULL_TEXT");
    };

    private DaoSession daoSession;


    public DiaryRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIARY_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_CREATE_DATE_TIME' INTEGER NOT NULL ," + // 1: LocalCreateDateTime
                "'LOCAL_CHANGE_DATE_TIME' INTEGER NOT NULL ," + // 2: LocalChangeDateTime
                "'SYNC_STATUS' INTEGER NOT NULL ," + // 3: SyncStatus
                "'SERVER_ID' INTEGER," + // 4: ServerId
                "'DELETED' INTEGER NOT NULL ," + // 5: Deleted
                "'DATE' INTEGER NOT NULL ," + // 6: Date
                "'START_TIME' INTEGER," + // 7: StartTime
                "'END_TIME' INTEGER," + // 8: EndTime
                "'LOCAL_TASK_ID' INTEGER," + // 9: LocalTaskId
                "'TASK_DELETED' INTEGER," + // 10: TaskDeleted
                "'LABEL_DELETED' INTEGER," + // 11: LabelDeleted
                "'IS_WASTE_TIME' INTEGER NOT NULL ," + // 12: IsWasteTime
                "'WAS_COMPLETED' INTEGER NOT NULL ," + // 13: WasCompleted
                "'TEXT' TEXT," + // 14: Text
                "'FULL_TEXT' TEXT);"); // 15: FullText
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIARY_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiaryRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalCreateDateTime());
        stmt.bindLong(3, entity.getLocalChangeDateTime());
        stmt.bindLong(4, entity.getSyncStatus());
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(5, ServerId);
        }
        stmt.bindLong(6, entity.getDeleted() ? 1l: 0l);
        stmt.bindLong(7, entity.getDate());
 
        Long StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(8, StartTime);
        }
 
        Long EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(9, EndTime);
        }
 
        Long LocalTaskId = entity.getLocalTaskId();
        if (LocalTaskId != null) {
            stmt.bindLong(10, LocalTaskId);
        }
 
        Boolean TaskDeleted = entity.getTaskDeleted();
        if (TaskDeleted != null) {
            stmt.bindLong(11, TaskDeleted ? 1l: 0l);
        }
 
        Boolean LabelDeleted = entity.getLabelDeleted();
        if (LabelDeleted != null) {
            stmt.bindLong(12, LabelDeleted ? 1l: 0l);
        }
        stmt.bindLong(13, entity.getIsWasteTime() ? 1l: 0l);
        stmt.bindLong(14, entity.getWasCompleted() ? 1l: 0l);
 
        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(15, Text);
        }
 
        String FullText = entity.getFullText();
        if (FullText != null) {
            stmt.bindString(16, FullText);
        }
    }

    @Override
    protected void attachEntity(DiaryRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DiaryRecord readEntity(Cursor cursor, int offset) {
        DiaryRecord entity = new DiaryRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // LocalCreateDateTime
            cursor.getLong(offset + 2), // LocalChangeDateTime
            (byte) cursor.getShort(offset + 3), // SyncStatus
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ServerId
            cursor.getShort(offset + 5) != 0, // Deleted
            cursor.getLong(offset + 6), // Date
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // StartTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // EndTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // LocalTaskId
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // TaskDeleted
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // LabelDeleted
            cursor.getShort(offset + 12) != 0, // IsWasteTime
            cursor.getShort(offset + 13) != 0, // WasCompleted
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Text
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // FullText
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DiaryRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalCreateDateTime(cursor.getLong(offset + 1));
        entity.setLocalChangeDateTime(cursor.getLong(offset + 2));
        entity.setSyncStatus((byte) cursor.getShort(offset + 3));
        entity.setServerId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDeleted(cursor.getShort(offset + 5) != 0);
        entity.setDate(cursor.getLong(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setLocalTaskId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setTaskDeleted(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setLabelDeleted(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsWasteTime(cursor.getShort(offset + 12) != 0);
        entity.setWasCompleted(cursor.getShort(offset + 13) != 0);
        entity.setText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFullText(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DiaryRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DiaryRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskDao().getAllColumns());
            builder.append(" FROM DIARY_RECORD T");
            builder.append(" LEFT JOIN TASK T0 ON T.'LOCAL_TASK_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DiaryRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        DiaryRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Task task = loadCurrentOther(daoSession.getTaskDao(), cursor, offset);
        entity.setTask(task);

        return entity;    
    }

    public DiaryRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DiaryRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DiaryRecord> list = new ArrayList<DiaryRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DiaryRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DiaryRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
