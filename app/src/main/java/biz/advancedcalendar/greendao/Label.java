package biz.advancedcalendar.greendao;

import java.util.List;
import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LABEL.
 */
public class Label implements java.io.Serializable {

    private Long id;
    private Long LocalParentId;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private Byte SyncStatus;
    private Long ServerId;
    /** Not-null value. */
    private String Text;
    private String Description;
    private int SortOrder;
    private Short Mode;
    private boolean Deleted;
    private Long CompanyId;
    private Long OriginalId;
    private boolean IsCompany;
    private Long LastMod;
    private Long Created;
    private boolean IsSection;
    private Byte SectionType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LabelDao myDao;

    private List<TaskLabel> taskLabelList;
    private List<DiaryRecordLabel> diaryRecordLabelList;
    private List<LabelContact> labelContactList;
    private List<FileLabel> fileLabelList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Label() {
    }

    public Label(Long id) {
        this.id = id;
    }

    public Label(Long id, Long LocalParentId, long LocalCreateDateTime, long LocalChangeDateTime, Byte SyncStatus, Long ServerId, String Text, String Description, int SortOrder, Short Mode, boolean Deleted, Long CompanyId, Long OriginalId, boolean IsCompany, Long LastMod, Long Created, boolean IsSection, Byte SectionType) {
        this.id = id;
        this.LocalParentId = LocalParentId;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.SyncStatus = SyncStatus;
        this.ServerId = ServerId;
        this.Text = Text;
        this.Description = Description;
        this.SortOrder = SortOrder;
        this.Mode = Mode;
        this.Deleted = Deleted;
        this.CompanyId = CompanyId;
        this.OriginalId = OriginalId;
        this.IsCompany = IsCompany;
        this.LastMod = LastMod;
        this.Created = Created;
        this.IsSection = IsSection;
        this.SectionType = SectionType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLabelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getLocalParentId() {
        return LocalParentId;
    }

    public void setLocalParentId(Long LocalParentId) {
        this.LocalParentId = LocalParentId;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public Byte getSyncStatus() {
        return SyncStatus;
    }

    public void setSyncStatus(Byte SyncStatus) {
        this.SyncStatus = SyncStatus;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    /** Not-null value. */
    public String getText() {
        return Text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String Text) {
        this.Text = Text;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    public int getSortOrder() {
        return SortOrder;
    }

    public void setSortOrder(int SortOrder) {
        this.SortOrder = SortOrder;
    }

    public Short getMode() {
        return Mode;
    }

    public void setMode(Short Mode) {
        this.Mode = Mode;
    }

    public boolean getDeleted() {
        return Deleted;
    }

    public void setDeleted(boolean Deleted) {
        this.Deleted = Deleted;
    }

    public Long getCompanyId() {
        return CompanyId;
    }

    public void setCompanyId(Long CompanyId) {
        this.CompanyId = CompanyId;
    }

    public Long getOriginalId() {
        return OriginalId;
    }

    public void setOriginalId(Long OriginalId) {
        this.OriginalId = OriginalId;
    }

    public boolean getIsCompany() {
        return IsCompany;
    }

    public void setIsCompany(boolean IsCompany) {
        this.IsCompany = IsCompany;
    }

    public Long getLastMod() {
        return LastMod;
    }

    public void setLastMod(Long LastMod) {
        this.LastMod = LastMod;
    }

    public Long getCreated() {
        return Created;
    }

    public void setCreated(Long Created) {
        this.Created = Created;
    }

    public boolean getIsSection() {
        return IsSection;
    }

    public void setIsSection(boolean IsSection) {
        this.IsSection = IsSection;
    }

    public Byte getSectionType() {
        return SectionType;
    }

    public void setSectionType(Byte SectionType) {
        this.SectionType = SectionType;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TaskLabel> getTaskLabelList() {
        if (taskLabelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskLabelDao targetDao = daoSession.getTaskLabelDao();
            List<TaskLabel> taskLabelListNew = targetDao._queryLabel_TaskLabelList(id);
            synchronized (this) {
                if(taskLabelList == null) {
                    taskLabelList = taskLabelListNew;
                }
            }
        }
        return taskLabelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTaskLabelList() {
        taskLabelList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DiaryRecordLabel> getDiaryRecordLabelList() {
        if (diaryRecordLabelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DiaryRecordLabelDao targetDao = daoSession.getDiaryRecordLabelDao();
            List<DiaryRecordLabel> diaryRecordLabelListNew = targetDao._queryLabel_DiaryRecordLabelList(id);
            synchronized (this) {
                if(diaryRecordLabelList == null) {
                    diaryRecordLabelList = diaryRecordLabelListNew;
                }
            }
        }
        return diaryRecordLabelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDiaryRecordLabelList() {
        diaryRecordLabelList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LabelContact> getLabelContactList() {
        if (labelContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelContactDao targetDao = daoSession.getLabelContactDao();
            List<LabelContact> labelContactListNew = targetDao._queryLabel_LabelContactList(id);
            synchronized (this) {
                if(labelContactList == null) {
                    labelContactList = labelContactListNew;
                }
            }
        }
        return labelContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLabelContactList() {
        labelContactList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FileLabel> getFileLabelList() {
        if (fileLabelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileLabelDao targetDao = daoSession.getFileLabelDao();
            List<FileLabel> fileLabelListNew = targetDao._queryLabel_FileLabelList(id);
            synchronized (this) {
                if(fileLabelList == null) {
                    fileLabelList = fileLabelListNew;
                }
            }
        }
        return fileLabelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileLabelList() {
        fileLabelList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	public short getDeepLevel(DaoSession daoSession2) {
		class ShortHolder {
			short value = 0;
		}
		final ShortHolder shortHolder = new ShortHolder();
		daoSession.runInTx(new Runnable() {
			@Override
			public void run() {
				Long localParentId = getLocalParentId();
				TaskDao dao = daoSession.getTaskDao();
				while (localParentId != null) {
					shortHolder.value++;
					localParentId = dao.load(localParentId).getParentId();
				}
			}
		});
		return shortHolder.value;
	}
    // KEEP METHODS END

}
