package biz.advancedcalendar.greendao;

import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LABEL_CONTACT.
 */
public class LabelContact {

    private Long id;
    private Long LabelId;
    private Long ContactId;
    private Boolean IsVirtual;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LabelContactDao myDao;

    private Label label;
    private Long label__resolvedKey;

    private Contact contact;
    private Long contact__resolvedKey;


    public LabelContact() {
    }

    public LabelContact(Long id) {
        this.id = id;
    }

    public LabelContact(Long id, Long LabelId, Long ContactId, Boolean IsVirtual) {
        this.id = id;
        this.LabelId = LabelId;
        this.ContactId = ContactId;
        this.IsVirtual = IsVirtual;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLabelContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getLabelId() {
        return LabelId;
    }

    public void setLabelId(Long LabelId) {
        this.LabelId = LabelId;
    }

    public Long getContactId() {
        return ContactId;
    }

    public void setContactId(Long ContactId) {
        this.ContactId = ContactId;
    }

    public Boolean getIsVirtual() {
        return IsVirtual;
    }

    public void setIsVirtual(Boolean IsVirtual) {
        this.IsVirtual = IsVirtual;
    }

    /** To-one relationship, resolved on first access. */
    public Label getLabel() {
        Long __key = this.LabelId;
        if (label__resolvedKey == null || !label__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            Label labelNew = targetDao.load(__key);
            synchronized (this) {
                label = labelNew;
            	label__resolvedKey = __key;
            }
        }
        return label;
    }

    public void setLabel(Label label) {
        synchronized (this) {
            this.label = label;
            LabelId = label == null ? null : label.getId();
            label__resolvedKey = LabelId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        Long __key = this.ContactId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            ContactId = contact == null ? null : contact.getId();
            contact__resolvedKey = ContactId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
