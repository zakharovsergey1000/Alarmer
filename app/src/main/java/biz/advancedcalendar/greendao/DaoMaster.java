package biz.advancedcalendar.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** Master of DAO (schema version 3): knows all DAOs. */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 3;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		UserProfileDao.createTable(db, ifNotExists);
		CalendarDao.createTable(db, ifNotExists);
		TaskDao.createTable(db, ifNotExists);
		TaskOccurrenceDao.createTable(db, ifNotExists);
		ReminderDao.createTable(db, ifNotExists);
		ScheduledReminderDao.createTable(db, ifNotExists);
		ElapsedReminderDao.createTable(db, ifNotExists);
		LabelDao.createTable(db, ifNotExists);
		ContactDao.createTable(db, ifNotExists);
		ContactDataDao.createTable(db, ifNotExists);
		FileDao.createTable(db, ifNotExists);
		WorkGroupDao.createTable(db, ifNotExists);
		WorkGroupMemberDao.createTable(db, ifNotExists);
		MessageDao.createTable(db, ifNotExists);
		DiaryRecordDao.createTable(db, ifNotExists);
		TaskLabelDao.createTable(db, ifNotExists);
		DiaryRecordLabelDao.createTable(db, ifNotExists);
		LabelContactDao.createTable(db, ifNotExists);
		TaskContactDao.createTable(db, ifNotExists);
		FileTaskDao.createTable(db, ifNotExists);
		FileLabelDao.createTable(db, ifNotExists);
		FileContactDao.createTable(db, ifNotExists);
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		UserProfileDao.dropTable(db, ifExists);
		CalendarDao.dropTable(db, ifExists);
		TaskDao.dropTable(db, ifExists);
		TaskOccurrenceDao.dropTable(db, ifExists);
		ReminderDao.dropTable(db, ifExists);
		ScheduledReminderDao.dropTable(db, ifExists);
		ElapsedReminderDao.dropTable(db, ifExists);
		LabelDao.dropTable(db, ifExists);
		ContactDao.dropTable(db, ifExists);
		ContactDataDao.dropTable(db, ifExists);
		FileDao.dropTable(db, ifExists);
		WorkGroupDao.dropTable(db, ifExists);
		WorkGroupMemberDao.dropTable(db, ifExists);
		MessageDao.dropTable(db, ifExists);
		DiaryRecordDao.dropTable(db, ifExists);
		TaskLabelDao.dropTable(db, ifExists);
		DiaryRecordLabelDao.dropTable(db, ifExists);
		LabelContactDao.dropTable(db, ifExists);
		TaskContactDao.dropTable(db, ifExists);
		FileTaskDao.dropTable(db, ifExists);
		FileLabelDao.dropTable(db, ifExists);
		FileContactDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {
		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, DaoMaster.SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.i("greenDAO", "Creating tables for schema version "
					+ DaoMaster.SCHEMA_VERSION);
			DaoMaster.createAllTables(db, false);
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to "
					+ newVersion);
			// Going from older schema to new schema
			if (oldVersion < 3) {
				switch (oldVersion) {
				case 1:
					boolean ifNotExists = false;
					// Leave old tables alone and only create ones that didn't exist
					// in the previous schema
					CalendarDao.createTable(db, ifNotExists);
					// modify table
					db.execSQL("ALTER TABLE 'TASK' ADD COLUMN 'CALENDAR_ID' INTEGER");
				case 2:
					// modify tables
					db.execSQL("ALTER TABLE 'TASK' ADD COLUMN 'RINGTONE_FADE_IN_TIME' INTEGER");
					db.execSQL("ALTER TABLE 'ELAPSED_REMINDER' ADD COLUMN 'RINGTONE_FADE_IN_TIME' INTEGER");
					db.execSQL("ALTER TABLE 'REMINDER' ADD COLUMN 'RINGTONE_FADE_IN_TIME' INTEGER");
					db.execSQL("ALTER TABLE 'SCHEDULED_REMINDER' ADD COLUMN 'RINGTONE_FADE_IN_TIME' INTEGER");
					break;
				default:
					DaoMaster.dropAllTables(db, true);
					onCreate(db);
					break;
				}
			} else {
				DaoMaster.dropAllTables(db, true);
				onCreate(db);
			}
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, DaoMaster.SCHEMA_VERSION);
		registerDaoClass(UserProfileDao.class);
		registerDaoClass(CalendarDao.class);
		registerDaoClass(TaskDao.class);
		registerDaoClass(TaskOccurrenceDao.class);
		registerDaoClass(ReminderDao.class);
		registerDaoClass(ScheduledReminderDao.class);
		registerDaoClass(ElapsedReminderDao.class);
		registerDaoClass(LabelDao.class);
		registerDaoClass(ContactDao.class);
		registerDaoClass(ContactDataDao.class);
		registerDaoClass(FileDao.class);
		registerDaoClass(WorkGroupDao.class);
		registerDaoClass(WorkGroupMemberDao.class);
		registerDaoClass(MessageDao.class);
		registerDaoClass(DiaryRecordDao.class);
		registerDaoClass(TaskLabelDao.class);
		registerDaoClass(DiaryRecordLabelDao.class);
		registerDaoClass(LabelContactDao.class);
		registerDaoClass(TaskContactDao.class);
		registerDaoClass(FileTaskDao.class);
		registerDaoClass(FileLabelDao.class);
		registerDaoClass(FileContactDao.class);
	}

	@Override
	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	@Override
	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}
}
