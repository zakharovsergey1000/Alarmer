package biz.advancedcalendar.greendao;

import java.util.List;
import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table WORK_GROUP.
 */
public class WorkGroup implements java.io.Serializable {

    private Long id;
    private Long LocalTaskId;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private Long ServerId;
    private Long TaskId;
    private Long OwnerId;
    private byte State;
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkGroupDao myDao;

    private Task task;
    private Long task__resolvedKey;

    private List<WorkGroupMember> workGroupMemberList;
    private List<Message> messageList;

    // KEEP FIELDS - put your custom fields here
	private List<WorkGroupMember> workGroupMemberListNotAttachedToDatabase;
    // KEEP FIELDS END

    public WorkGroup() {
    }

    public WorkGroup(Long id) {
        this.id = id;
    }

    public WorkGroup(Long id, Long LocalTaskId, long LocalCreateDateTime, long LocalChangeDateTime, Long ServerId, Long TaskId, Long OwnerId, byte State, String Name) {
        this.id = id;
        this.LocalTaskId = LocalTaskId;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.ServerId = ServerId;
        this.TaskId = TaskId;
        this.OwnerId = OwnerId;
        this.State = State;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkGroupDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getLocalTaskId() {
        return LocalTaskId;
    }

    public void setLocalTaskId(Long LocalTaskId) {
        this.LocalTaskId = LocalTaskId;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public Long getTaskId() {
        return TaskId;
    }

    public void setTaskId(Long TaskId) {
        this.TaskId = TaskId;
    }

    public Long getOwnerId() {
        return OwnerId;
    }

    public void setOwnerId(Long OwnerId) {
        this.OwnerId = OwnerId;
    }

    public byte getState() {
        return State;
    }

    public void setState(byte State) {
        this.State = State;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-one relationship, resolved on first access. */
    public Task getTask() {
        Long __key = this.LocalTaskId;
        if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task taskNew = targetDao.load(__key);
            synchronized (this) {
                task = taskNew;
            	task__resolvedKey = __key;
            }
        }
        return task;
    }

    public void setTask(Task task) {
        synchronized (this) {
            this.task = task;
            LocalTaskId = task == null ? null : task.getId();
            task__resolvedKey = LocalTaskId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WorkGroupMember> getWorkGroupMemberList() {
        if (workGroupMemberList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkGroupMemberDao targetDao = daoSession.getWorkGroupMemberDao();
            List<WorkGroupMember> workGroupMemberListNew = targetDao._queryWorkGroup_WorkGroupMemberList(id);
            synchronized (this) {
                if(workGroupMemberList == null) {
                    workGroupMemberList = workGroupMemberListNew;
                }
            }
        }
        return workGroupMemberList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWorkGroupMemberList() {
        workGroupMemberList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getMessageList() {
        if (messageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messageListNew = targetDao._queryWorkGroup_MessageList(id);
            synchronized (this) {
                if(messageList == null) {
                    messageList = messageListNew;
                }
            }
        }
        return messageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessageList() {
        messageList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	public List<WorkGroupMember> getWorkGroupMemberListNotAttachedToDatabase() {
		return workGroupMemberListNotAttachedToDatabase;
	}

	public void setWorkGroupMemberListNotAttachedToDatabase(
			List<WorkGroupMember> workGroupMemberListNotAttachedToDatabase) {
		this.workGroupMemberListNotAttachedToDatabase = workGroupMemberListNotAttachedToDatabase;
	}
    // KEEP METHODS END

}
