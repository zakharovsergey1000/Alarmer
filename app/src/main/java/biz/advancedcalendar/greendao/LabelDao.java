package biz.advancedcalendar.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import biz.advancedcalendar.greendao.Label;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LABEL.
*/
public class LabelDao extends AbstractDao<Label, Long> {

    public static final String TABLENAME = "LABEL";

    /**
     * Properties of entity Label.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalParentId = new Property(1, Long.class, "LocalParentId", false, "LOCAL_PARENT_ID");
        public final static Property LocalCreateDateTime = new Property(2, long.class, "LocalCreateDateTime", false, "LOCAL_CREATE_DATE_TIME");
        public final static Property LocalChangeDateTime = new Property(3, long.class, "LocalChangeDateTime", false, "LOCAL_CHANGE_DATE_TIME");
        public final static Property SyncStatus = new Property(4, Byte.class, "SyncStatus", false, "SYNC_STATUS");
        public final static Property ServerId = new Property(5, Long.class, "ServerId", false, "SERVER_ID");
        public final static Property Text = new Property(6, String.class, "Text", false, "TEXT");
        public final static Property Description = new Property(7, String.class, "Description", false, "DESCRIPTION");
        public final static Property SortOrder = new Property(8, int.class, "SortOrder", false, "SORT_ORDER");
        public final static Property Mode = new Property(9, Short.class, "Mode", false, "MODE");
        public final static Property Deleted = new Property(10, boolean.class, "Deleted", false, "DELETED");
        public final static Property CompanyId = new Property(11, Long.class, "CompanyId", false, "COMPANY_ID");
        public final static Property OriginalId = new Property(12, Long.class, "OriginalId", false, "ORIGINAL_ID");
        public final static Property IsCompany = new Property(13, boolean.class, "IsCompany", false, "IS_COMPANY");
        public final static Property LastMod = new Property(14, Long.class, "LastMod", false, "LAST_MOD");
        public final static Property Created = new Property(15, Long.class, "Created", false, "CREATED");
        public final static Property IsSection = new Property(16, boolean.class, "IsSection", false, "IS_SECTION");
        public final static Property SectionType = new Property(17, Byte.class, "SectionType", false, "SECTION_TYPE");
    };

    private DaoSession daoSession;


    public LabelDao(DaoConfig config) {
        super(config);
    }
    
    public LabelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LABEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_PARENT_ID' INTEGER," + // 1: LocalParentId
                "'LOCAL_CREATE_DATE_TIME' INTEGER NOT NULL ," + // 2: LocalCreateDateTime
                "'LOCAL_CHANGE_DATE_TIME' INTEGER NOT NULL ," + // 3: LocalChangeDateTime
                "'SYNC_STATUS' INTEGER," + // 4: SyncStatus
                "'SERVER_ID' INTEGER," + // 5: ServerId
                "'TEXT' TEXT NOT NULL ," + // 6: Text
                "'DESCRIPTION' TEXT," + // 7: Description
                "'SORT_ORDER' INTEGER NOT NULL ," + // 8: SortOrder
                "'MODE' INTEGER," + // 9: Mode
                "'DELETED' INTEGER NOT NULL ," + // 10: Deleted
                "'COMPANY_ID' INTEGER," + // 11: CompanyId
                "'ORIGINAL_ID' INTEGER," + // 12: OriginalId
                "'IS_COMPANY' INTEGER NOT NULL ," + // 13: IsCompany
                "'LAST_MOD' INTEGER," + // 14: LastMod
                "'CREATED' INTEGER," + // 15: Created
                "'IS_SECTION' INTEGER NOT NULL ," + // 16: IsSection
                "'SECTION_TYPE' INTEGER);"); // 17: SectionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LABEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Label entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long LocalParentId = entity.getLocalParentId();
        if (LocalParentId != null) {
            stmt.bindLong(2, LocalParentId);
        }
        stmt.bindLong(3, entity.getLocalCreateDateTime());
        stmt.bindLong(4, entity.getLocalChangeDateTime());
 
        Byte SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(5, SyncStatus);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(6, ServerId);
        }
        stmt.bindString(7, entity.getText());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(8, Description);
        }
        stmt.bindLong(9, entity.getSortOrder());
 
        Short Mode = entity.getMode();
        if (Mode != null) {
            stmt.bindLong(10, Mode);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1l: 0l);
 
        Long CompanyId = entity.getCompanyId();
        if (CompanyId != null) {
            stmt.bindLong(12, CompanyId);
        }
 
        Long OriginalId = entity.getOriginalId();
        if (OriginalId != null) {
            stmt.bindLong(13, OriginalId);
        }
        stmt.bindLong(14, entity.getIsCompany() ? 1l: 0l);
 
        Long LastMod = entity.getLastMod();
        if (LastMod != null) {
            stmt.bindLong(15, LastMod);
        }
 
        Long Created = entity.getCreated();
        if (Created != null) {
            stmt.bindLong(16, Created);
        }
        stmt.bindLong(17, entity.getIsSection() ? 1l: 0l);
 
        Byte SectionType = entity.getSectionType();
        if (SectionType != null) {
            stmt.bindLong(18, SectionType);
        }
    }

    @Override
    protected void attachEntity(Label entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Label readEntity(Cursor cursor, int offset) {
        Label entity = new Label( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // LocalParentId
            cursor.getLong(offset + 2), // LocalCreateDateTime
            cursor.getLong(offset + 3), // LocalChangeDateTime
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4), // SyncStatus
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ServerId
            cursor.getString(offset + 6), // Text
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Description
            cursor.getInt(offset + 8), // SortOrder
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // Mode
            cursor.getShort(offset + 10) != 0, // Deleted
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // CompanyId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // OriginalId
            cursor.getShort(offset + 13) != 0, // IsCompany
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // LastMod
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // Created
            cursor.getShort(offset + 16) != 0, // IsSection
            cursor.isNull(offset + 17) ? null : (byte) cursor.getShort(offset + 17) // SectionType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Label entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLocalCreateDateTime(cursor.getLong(offset + 2));
        entity.setLocalChangeDateTime(cursor.getLong(offset + 3));
        entity.setSyncStatus(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
        entity.setServerId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setText(cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSortOrder(cursor.getInt(offset + 8));
        entity.setMode(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setDeleted(cursor.getShort(offset + 10) != 0);
        entity.setCompanyId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setOriginalId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setIsCompany(cursor.getShort(offset + 13) != 0);
        entity.setLastMod(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setCreated(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setIsSection(cursor.getShort(offset + 16) != 0);
        entity.setSectionType(cursor.isNull(offset + 17) ? null : (byte) cursor.getShort(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Label entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Label entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
