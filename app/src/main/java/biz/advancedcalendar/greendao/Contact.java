package biz.advancedcalendar.greendao;

import java.util.List;
import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CONTACT.
 */
public class Contact implements java.io.Serializable {

    private Long id;
    private String LocalPhotoPath;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private Byte SyncStatus;
    private Long ServerId;
    private Long LastMod;
    private Long Created;
    private String UserName;
    private String ContactName;
    private String Description;
    private String Photo;
    private Integer SortOrder;
    private boolean Deleted;
    private Byte BirthDay;
    private Byte BirthMonth;
    private Short BirthYear;
    private Byte CorpStatus;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDao myDao;

    private List<ContactData> contactDataList;
    private List<LabelContact> labelContactList;
    private List<TaskContact> taskContactList;
    private List<FileContact> fileContactList;

    public Contact() {
    }

    public Contact(Long id) {
        this.id = id;
    }

    public Contact(Long id, String LocalPhotoPath, long LocalCreateDateTime, long LocalChangeDateTime, Byte SyncStatus, Long ServerId, Long LastMod, Long Created, String UserName, String ContactName, String Description, String Photo, Integer SortOrder, boolean Deleted, Byte BirthDay, Byte BirthMonth, Short BirthYear, Byte CorpStatus) {
        this.id = id;
        this.LocalPhotoPath = LocalPhotoPath;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.SyncStatus = SyncStatus;
        this.ServerId = ServerId;
        this.LastMod = LastMod;
        this.Created = Created;
        this.UserName = UserName;
        this.ContactName = ContactName;
        this.Description = Description;
        this.Photo = Photo;
        this.SortOrder = SortOrder;
        this.Deleted = Deleted;
        this.BirthDay = BirthDay;
        this.BirthMonth = BirthMonth;
        this.BirthYear = BirthYear;
        this.CorpStatus = CorpStatus;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLocalPhotoPath() {
        return LocalPhotoPath;
    }

    public void setLocalPhotoPath(String LocalPhotoPath) {
        this.LocalPhotoPath = LocalPhotoPath;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public Byte getSyncStatus() {
        return SyncStatus;
    }

    public void setSyncStatus(Byte SyncStatus) {
        this.SyncStatus = SyncStatus;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public Long getLastMod() {
        return LastMod;
    }

    public void setLastMod(Long LastMod) {
        this.LastMod = LastMod;
    }

    public Long getCreated() {
        return Created;
    }

    public void setCreated(Long Created) {
        this.Created = Created;
    }

    public String getUserName() {
        return UserName;
    }

    public void setUserName(String UserName) {
        this.UserName = UserName;
    }

    public String getContactName() {
        return ContactName;
    }

    public void setContactName(String ContactName) {
        this.ContactName = ContactName;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    public String getPhoto() {
        return Photo;
    }

    public void setPhoto(String Photo) {
        this.Photo = Photo;
    }

    public Integer getSortOrder() {
        return SortOrder;
    }

    public void setSortOrder(Integer SortOrder) {
        this.SortOrder = SortOrder;
    }

    public boolean getDeleted() {
        return Deleted;
    }

    public void setDeleted(boolean Deleted) {
        this.Deleted = Deleted;
    }

    public Byte getBirthDay() {
        return BirthDay;
    }

    public void setBirthDay(Byte BirthDay) {
        this.BirthDay = BirthDay;
    }

    public Byte getBirthMonth() {
        return BirthMonth;
    }

    public void setBirthMonth(Byte BirthMonth) {
        this.BirthMonth = BirthMonth;
    }

    public Short getBirthYear() {
        return BirthYear;
    }

    public void setBirthYear(Short BirthYear) {
        this.BirthYear = BirthYear;
    }

    public Byte getCorpStatus() {
        return CorpStatus;
    }

    public void setCorpStatus(Byte CorpStatus) {
        this.CorpStatus = CorpStatus;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactData> getContactDataList() {
        if (contactDataList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDataDao targetDao = daoSession.getContactDataDao();
            List<ContactData> contactDataListNew = targetDao._queryContact_ContactDataList(id);
            synchronized (this) {
                if(contactDataList == null) {
                    contactDataList = contactDataListNew;
                }
            }
        }
        return contactDataList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContactDataList() {
        contactDataList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LabelContact> getLabelContactList() {
        if (labelContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelContactDao targetDao = daoSession.getLabelContactDao();
            List<LabelContact> labelContactListNew = targetDao._queryContact_LabelContactList(id);
            synchronized (this) {
                if(labelContactList == null) {
                    labelContactList = labelContactListNew;
                }
            }
        }
        return labelContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLabelContactList() {
        labelContactList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TaskContact> getTaskContactList() {
        if (taskContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskContactDao targetDao = daoSession.getTaskContactDao();
            List<TaskContact> taskContactListNew = targetDao._queryContact_TaskContactList(id);
            synchronized (this) {
                if(taskContactList == null) {
                    taskContactList = taskContactListNew;
                }
            }
        }
        return taskContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTaskContactList() {
        taskContactList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FileContact> getFileContactList() {
        if (fileContactList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileContactDao targetDao = daoSession.getFileContactDao();
            List<FileContact> fileContactListNew = targetDao._queryContact_FileContactList(id);
            synchronized (this) {
                if(fileContactList == null) {
                    fileContactList = fileContactListNew;
                }
            }
        }
        return fileContactList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileContactList() {
        fileContactList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
