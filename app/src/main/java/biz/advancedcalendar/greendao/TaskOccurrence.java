package biz.advancedcalendar.greendao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
import android.os.Parcel;
import android.os.Parcelable;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// KEEP INCLUDES END
/** Entity mapped to table TASK_OCCURRENCE. */
public class TaskOccurrence implements Parcelable, Comparable<TaskOccurrence> {
	private Long id;
	private Long taskId;
	private int ordinalNumber;
	/** Used to resolve relations */
	private transient DaoSession daoSession;
	/** Used for active entity operations. */
	private transient TaskOccurrenceDao myDao;
	private Task task;
	private Long task__resolvedKey;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END
	public TaskOccurrence() {
	}

	public TaskOccurrence(Long id) {
		this.id = id;
	}

	public TaskOccurrence(Long id, Long taskId, int ordinalNumber) {
		this.id = id;
		this.taskId = taskId;
		this.ordinalNumber = ordinalNumber;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getTaskOccurrenceDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getTaskId() {
		return taskId;
	}

	public void setTaskId(Long taskId) {
		this.taskId = taskId;
	}

	public int getOrdinalNumber() {
		return ordinalNumber;
	}

	public void setOrdinalNumber(int ordinalNumber) {
		this.ordinalNumber = ordinalNumber;
	}

	/** To-one relationship, resolved on first access. */
	public Task getTask() {
		Long __key = taskId;
		if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			TaskDao targetDao = daoSession.getTaskDao();
			Task taskNew = targetDao.load(__key);
			synchronized (this) {
				task = taskNew;
				task__resolvedKey = __key;
			}
		}
		return task;
	}

	public void setTask(Task task) {
		synchronized (this) {
			this.task = task;
			taskId = task == null ? null : task.getId();
			task__resolvedKey = taskId;
		}
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an
	 * entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an
	 * entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an
	 * entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	// KEEP METHODS - put your custom methods here
	public TaskOccurrence(TaskOccurrence taskOccurrence) {
		this(taskOccurrence.id, taskOccurrence.taskId, taskOccurrence.ordinalNumber);
	}

	@Override
	public int compareTo(TaskOccurrence another) {
		if (ordinalNumber < another.ordinalNumber) {
			return -1;
		} else if (ordinalNumber > another.ordinalNumber) {
			return 1;
		} else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object o) {
		TaskOccurrence taskOccurrence = (TaskOccurrence) o;
		if (ordinalNumber == taskOccurrence.ordinalNumber) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return ordinalNumber;
	}

	protected TaskOccurrence(Parcel in) {
		id = in.readByte() == 0x00 ? null : in.readLong();
		taskId = in.readByte() == 0x00 ? null : in.readLong();
		ordinalNumber = in.readInt();
	}

	@Override
	public int describeContents() {
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		if (id == null) {
			dest.writeByte((byte) 0x00);
		} else {
			dest.writeByte((byte) 0x01);
			dest.writeLong(id);
		}
		if (taskId == null) {
			dest.writeByte((byte) 0x00);
		} else {
			dest.writeByte((byte) 0x01);
			dest.writeLong(taskId);
		}
		dest.writeInt(ordinalNumber);
	}

	public static final Parcelable.Creator<TaskOccurrence> CREATOR = new Parcelable.Creator<TaskOccurrence>() {
		@Override
		public TaskOccurrence createFromParcel(Parcel in) {
			return new TaskOccurrence(in);
		}

		@Override
		public TaskOccurrence[] newArray(int size) {
			return new TaskOccurrence[size];
		}
	};
	// KEEP METHODS END
}
