package biz.advancedcalendar.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import biz.advancedcalendar.greendao.WorkGroupMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WORK_GROUP_MEMBER.
*/
public class WorkGroupMemberDao extends AbstractDao<WorkGroupMember, Long> {

    public static final String TABLENAME = "WORK_GROUP_MEMBER";

    /**
     * Properties of entity WorkGroupMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalWorkGroupId = new Property(1, Long.class, "LocalWorkGroupId", false, "LOCAL_WORK_GROUP_ID");
        public final static Property LocalCreateDateTime = new Property(2, long.class, "LocalCreateDateTime", false, "LOCAL_CREATE_DATE_TIME");
        public final static Property LocalChangeDateTime = new Property(3, long.class, "LocalChangeDateTime", false, "LOCAL_CHANGE_DATE_TIME");
        public final static Property MemberId = new Property(4, Long.class, "MemberId", false, "MEMBER_ID");
        public final static Property GroupId = new Property(5, Long.class, "GroupId", false, "GROUP_ID");
        public final static Property UserId = new Property(6, Long.class, "UserId", false, "USER_ID");
        public final static Property UserInCompanyId = new Property(7, Long.class, "UserInCompanyId", false, "USER_IN_COMPANY_ID");
        public final static Property State = new Property(8, Byte.class, "State", false, "STATE");
        public final static Property Role = new Property(9, Byte.class, "Role", false, "ROLE");
        public final static Property JoinDate = new Property(10, Long.class, "JoinDate", false, "JOIN_DATE");
        public final static Property LastReadMsg = new Property(11, Long.class, "LastReadMsg", false, "LAST_READ_MSG");
    };

    private DaoSession daoSession;

    private Query<WorkGroupMember> workGroup_WorkGroupMemberListQuery;

    public WorkGroupMemberDao(DaoConfig config) {
        super(config);
    }
    
    public WorkGroupMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WORK_GROUP_MEMBER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_WORK_GROUP_ID' INTEGER," + // 1: LocalWorkGroupId
                "'LOCAL_CREATE_DATE_TIME' INTEGER NOT NULL ," + // 2: LocalCreateDateTime
                "'LOCAL_CHANGE_DATE_TIME' INTEGER NOT NULL ," + // 3: LocalChangeDateTime
                "'MEMBER_ID' INTEGER," + // 4: MemberId
                "'GROUP_ID' INTEGER," + // 5: GroupId
                "'USER_ID' INTEGER," + // 6: UserId
                "'USER_IN_COMPANY_ID' INTEGER," + // 7: UserInCompanyId
                "'STATE' INTEGER," + // 8: State
                "'ROLE' INTEGER," + // 9: Role
                "'JOIN_DATE' INTEGER," + // 10: JoinDate
                "'LAST_READ_MSG' INTEGER);"); // 11: LastReadMsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WORK_GROUP_MEMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WorkGroupMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long LocalWorkGroupId = entity.getLocalWorkGroupId();
        if (LocalWorkGroupId != null) {
            stmt.bindLong(2, LocalWorkGroupId);
        }
        stmt.bindLong(3, entity.getLocalCreateDateTime());
        stmt.bindLong(4, entity.getLocalChangeDateTime());
 
        Long MemberId = entity.getMemberId();
        if (MemberId != null) {
            stmt.bindLong(5, MemberId);
        }
 
        Long GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindLong(6, GroupId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(7, UserId);
        }
 
        Long UserInCompanyId = entity.getUserInCompanyId();
        if (UserInCompanyId != null) {
            stmt.bindLong(8, UserInCompanyId);
        }
 
        Byte State = entity.getState();
        if (State != null) {
            stmt.bindLong(9, State);
        }
 
        Byte Role = entity.getRole();
        if (Role != null) {
            stmt.bindLong(10, Role);
        }
 
        Long JoinDate = entity.getJoinDate();
        if (JoinDate != null) {
            stmt.bindLong(11, JoinDate);
        }
 
        Long LastReadMsg = entity.getLastReadMsg();
        if (LastReadMsg != null) {
            stmt.bindLong(12, LastReadMsg);
        }
    }

    @Override
    protected void attachEntity(WorkGroupMember entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WorkGroupMember readEntity(Cursor cursor, int offset) {
        WorkGroupMember entity = new WorkGroupMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // LocalWorkGroupId
            cursor.getLong(offset + 2), // LocalCreateDateTime
            cursor.getLong(offset + 3), // LocalChangeDateTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // MemberId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // GroupId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // UserId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // UserInCompanyId
            cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8), // State
            cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9), // Role
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // JoinDate
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // LastReadMsg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WorkGroupMember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalWorkGroupId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLocalCreateDateTime(cursor.getLong(offset + 2));
        entity.setLocalChangeDateTime(cursor.getLong(offset + 3));
        entity.setMemberId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUserInCompanyId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8));
        entity.setRole(cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9));
        entity.setJoinDate(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLastReadMsg(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WorkGroupMember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WorkGroupMember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "workGroupMemberList" to-many relationship of WorkGroup. */
    public List<WorkGroupMember> _queryWorkGroup_WorkGroupMemberList(Long LocalWorkGroupId) {
        synchronized (this) {
            if (workGroup_WorkGroupMemberListQuery == null) {
                QueryBuilder<WorkGroupMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LocalWorkGroupId.eq(null));
                workGroup_WorkGroupMemberListQuery = queryBuilder.build();
            }
        }
        Query<WorkGroupMember> query = workGroup_WorkGroupMemberListQuery.forCurrentThread();
        query.setParameter(0, LocalWorkGroupId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkGroupDao().getAllColumns());
            builder.append(" FROM WORK_GROUP_MEMBER T");
            builder.append(" LEFT JOIN WORK_GROUP T0 ON T.'LOCAL_WORK_GROUP_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WorkGroupMember loadCurrentDeep(Cursor cursor, boolean lock) {
        WorkGroupMember entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WorkGroup workGroup = loadCurrentOther(daoSession.getWorkGroupDao(), cursor, offset);
        entity.setWorkGroup(workGroup);

        return entity;    
    }

    public WorkGroupMember loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WorkGroupMember> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WorkGroupMember> list = new ArrayList<WorkGroupMember>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WorkGroupMember> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WorkGroupMember> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
