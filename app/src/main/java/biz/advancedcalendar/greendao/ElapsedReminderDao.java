package biz.advancedcalendar.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** DAO for table ELAPSED_REMINDER. */
public class ElapsedReminderDao extends AbstractDao<ElapsedReminder, Long> {
	public static final String TABLENAME = "ELAPSED_REMINDER";

	/** Properties of entity ElapsedReminder.<br/>
	 * Can be used for QueryBuilder and for referencing column names. */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property ReminderId = new Property(1, Long.class,
				"reminderId", false, "REMINDER_ID");
		public final static Property ScheduledReminderId = new Property(2, Long.class,
				"scheduledReminderId", false, "SCHEDULED_REMINDER_ID");
		public final static Property AssignedRemindAtDateTime = new Property(3,
				Long.class, "assignedRemindAtDateTime", false,
				"ASSIGNED_REMIND_AT_DATE_TIME");
		public final static Property ActualLastAlarmedDateTime = new Property(4,
				long.class, "actualLastAlarmedDateTime", false,
				"ACTUAL_LAST_ALARMED_DATE_TIME");
		public final static Property SnoozeCount = new Property(5, int.class,
				"snoozeCount", false, "SNOOZE_COUNT");
		public final static Property Text = new Property(6, String.class, "text", false,
				"TEXT");
		public final static Property IsAlarm = new Property(7, boolean.class, "isAlarm",
				false, "IS_ALARM");
		public final static Property ShowInNotifications = new Property(8, boolean.class,
				"showInNotifications", false, "SHOW_IN_NOTIFICATIONS");
		public final static Property WasEnabled = new Property(9, boolean.class,
				"wasEnabled", false, "WAS_ENABLED");
		public final static Property Ringtone = new Property(10, String.class,
				"ringtone", false, "RINGTONE");
		public final static Property PlayingTime = new Property(11, Integer.class,
				"playingTime", false, "PLAYING_TIME");
		public final static Property AutomaticSnoozeDuration = new Property(12,
				Integer.class, "automaticSnoozeDuration", false,
				"AUTOMATIC_SNOOZE_DURATION");
		public final static Property AutomaticSnoozesMaxCount = new Property(13,
				Integer.class, "automaticSnoozesMaxCount", false,
				"AUTOMATIC_SNOOZES_MAX_COUNT");
		public final static Property Vibrate = new Property(14, Boolean.class, "vibrate",
				false, "VIBRATE");
		public final static Property VibratePattern = new Property(15, String.class,
				"vibratePattern", false, "VIBRATE_PATTERN");
		public final static Property Led = new Property(16, Boolean.class, "led", false,
				"LED");
		public final static Property LedPattern = new Property(17, String.class,
				"ledPattern", false, "LED_PATTERN");
		public final static Property LedColor = new Property(18, Integer.class,
				"ledColor", false, "LED_COLOR");
		public final static Property RingtoneFadeInTime = new Property(19, Long.class,
				"ringtoneFadeInTime", false, "RINGTONE_FADE_IN_TIME");
	};

	private DaoSession daoSession;

	public ElapsedReminderDao(DaoConfig config) {
		super(config);
	}

	public ElapsedReminderDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'ELAPSED_REMINDER' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'REMINDER_ID' INTEGER," + // 1: reminderId
				"'SCHEDULED_REMINDER_ID' INTEGER," + // 2: scheduledReminderId
				"'ASSIGNED_REMIND_AT_DATE_TIME' INTEGER," + // 3: assignedRemindAtDateTime
				"'ACTUAL_LAST_ALARMED_DATE_TIME' INTEGER NOT NULL ," + // 4:
																		// actualLastAlarmedDateTime
				"'SNOOZE_COUNT' INTEGER NOT NULL ," + // 5: snoozeCount
				"'TEXT' TEXT NOT NULL ," + // 6: text
				"'IS_ALARM' INTEGER NOT NULL ," + // 7: isAlarm
				"'SHOW_IN_NOTIFICATIONS' INTEGER NOT NULL ," + // 8: showInNotifications
				"'WAS_ENABLED' INTEGER NOT NULL ," + // 9: wasEnabled
				"'RINGTONE' TEXT," + // 10: ringtone
				"'PLAYING_TIME' INTEGER," + // 11: playingTime
				"'AUTOMATIC_SNOOZE_DURATION' INTEGER," + // 12: automaticSnoozeDuration
				"'AUTOMATIC_SNOOZES_MAX_COUNT' INTEGER," + // 13: automaticSnoozesMaxCount
				"'VIBRATE' INTEGER," + // 14: vibrate
				"'VIBRATE_PATTERN' TEXT," + // 15: vibratePattern
				"'LED' INTEGER," + // 16: led
				"'LED_PATTERN' TEXT," + // 17: ledPattern
				"'LED_COLOR' INTEGER," + // 18: ledColor
				"'RINGTONE_FADE_IN_TIME' INTEGER);"); // 19: ringtoneFadeInTime
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'ELAPSED_REMINDER'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, ElapsedReminder entity) {
		stmt.clearBindings();
		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		Long reminderId = entity.getReminderId();
		if (reminderId != null) {
			stmt.bindLong(2, reminderId);
		}
		Long scheduledReminderId = entity.getScheduledReminderId();
		if (scheduledReminderId != null) {
			stmt.bindLong(3, scheduledReminderId);
		}
		Long assignedRemindAtDateTime = entity.getAssignedRemindAtDateTime();
		if (assignedRemindAtDateTime != null) {
			stmt.bindLong(4, assignedRemindAtDateTime);
		}
		stmt.bindLong(5, entity.getActualLastAlarmedDateTime());
		stmt.bindLong(6, entity.getSnoozeCount());
		stmt.bindString(7, entity.getText());
		stmt.bindLong(8, entity.getIsAlarm() ? 1l : 0l);
		stmt.bindLong(9, entity.getShowInNotifications() ? 1l : 0l);
		stmt.bindLong(10, entity.getWasEnabled() ? 1l : 0l);
		String ringtone = entity.getRingtone();
		if (ringtone != null) {
			stmt.bindString(11, ringtone);
		}
		Long ringtoneFadeInTime = entity.getRingtoneFadeInTime();
		if (ringtoneFadeInTime != null) {
			stmt.bindLong(20, ringtoneFadeInTime);
		}
		Integer playingTime = entity.getPlayingTime();
		if (playingTime != null) {
			stmt.bindLong(12, playingTime);
		}
		Integer automaticSnoozeDuration = entity.getAutomaticSnoozeDuration();
		if (automaticSnoozeDuration != null) {
			stmt.bindLong(13, automaticSnoozeDuration);
		}
		Integer automaticSnoozesMaxCount = entity.getAutomaticSnoozesMaxCount();
		if (automaticSnoozesMaxCount != null) {
			stmt.bindLong(14, automaticSnoozesMaxCount);
		}
		Boolean vibrate = entity.getVibrate();
		if (vibrate != null) {
			stmt.bindLong(15, vibrate ? 1l : 0l);
		}
		String vibratePattern = entity.getVibratePattern();
		if (vibratePattern != null) {
			stmt.bindString(16, vibratePattern);
		}
		Boolean led = entity.getLed();
		if (led != null) {
			stmt.bindLong(17, led ? 1l : 0l);
		}
		String ledPattern = entity.getLedPattern();
		if (ledPattern != null) {
			stmt.bindString(18, ledPattern);
		}
		Integer ledColor = entity.getLedColor();
		if (ledColor != null) {
			stmt.bindLong(19, ledColor);
		}
	}

	@Override
	protected void attachEntity(ElapsedReminder entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public ElapsedReminder readEntity(Cursor cursor, int offset) {
		ElapsedReminder entity = new ElapsedReminder( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // reminderId
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // scheduledReminderId
				cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // assignedRemindAtDateTime
				cursor.getLong(offset + 4), // actualLastAlarmedDateTime
				cursor.getInt(offset + 5), // snoozeCount
				cursor.getString(offset + 6), // text
				cursor.getShort(offset + 7) != 0, // isAlarm
				cursor.getShort(offset + 8) != 0, // showInNotifications
				cursor.getShort(offset + 9) != 0, // wasEnabled
				cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ringtone
				cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // playingTime
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // automaticSnoozeDuration
				cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // automaticSnoozesMaxCount
				cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // vibrate
				cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // vibratePattern
				cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // led
				cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // ledPattern
				cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ledColor
				cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) // ringtoneFadeInTime
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, ElapsedReminder entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setReminderId(cursor.isNull(offset + 1) ? null : cursor
				.getLong(offset + 1));
		entity.setScheduledReminderId(cursor.isNull(offset + 2) ? null : cursor
				.getLong(offset + 2));
		entity.setAssignedRemindAtDateTime(cursor.isNull(offset + 3) ? null : cursor
				.getLong(offset + 3));
		entity.setActualLastAlarmedDateTime(cursor.getLong(offset + 4));
		entity.setSnoozeCount(cursor.getInt(offset + 5));
		entity.setText(cursor.getString(offset + 6));
		entity.setIsAlarm(cursor.getShort(offset + 7) != 0);
		entity.setShowInNotifications(cursor.getShort(offset + 8) != 0);
		entity.setWasEnabled(cursor.getShort(offset + 9) != 0);
		entity.setRingtone(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setRingtoneFadeInTime(cursor.isNull(offset + 19) ? null : cursor
				.getLong(offset + 19));
		entity.setPlayingTime(cursor.isNull(offset + 11) ? null : cursor
				.getInt(offset + 11));
		entity.setAutomaticSnoozeDuration(cursor.isNull(offset + 12) ? null : cursor
				.getInt(offset + 12));
		entity.setAutomaticSnoozesMaxCount(cursor.isNull(offset + 13) ? null : cursor
				.getInt(offset + 13));
		entity.setVibrate(cursor.isNull(offset + 14) ? null : cursor
				.getShort(offset + 14) != 0);
		entity.setVibratePattern(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setLed(cursor.isNull(offset + 16) ? null
				: cursor.getShort(offset + 16) != 0);
		entity.setLedPattern(cursor.isNull(offset + 17) ? null : cursor
				.getString(offset + 17));
		entity.setLedColor(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(ElapsedReminder entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(ElapsedReminder entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getReminderDao()
					.getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T1", daoSession.getScheduledReminderDao()
					.getAllColumns());
			builder.append(" FROM ELAPSED_REMINDER T");
			builder.append(" LEFT JOIN REMINDER T0 ON T.'REMINDER_ID'=T0.'_id'");
			builder.append(" LEFT JOIN SCHEDULED_REMINDER T1 ON T.'SCHEDULED_REMINDER_ID'=T1.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected ElapsedReminder loadCurrentDeep(Cursor cursor, boolean lock) {
		ElapsedReminder entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;
		Reminder reminder = loadCurrentOther(daoSession.getReminderDao(), cursor, offset);
		entity.setReminder(reminder);
		offset += daoSession.getReminderDao().getAllColumns().length;
		ScheduledReminder scheduledReminder = loadCurrentOther(
				daoSession.getScheduledReminderDao(), cursor, offset);
		entity.setScheduledReminder(scheduledReminder);
		return entity;
	}

	public ElapsedReminder loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}
		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();
		String[] keyArray = new String[] {key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);
		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException("Expected unique result, but count was "
						+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO
	 * objects. */
	public List<ElapsedReminder> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<ElapsedReminder> list = new ArrayList<ElapsedReminder>(count);
		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<ElapsedReminder> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<ElapsedReminder> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}
}
