package biz.advancedcalendar.greendao;

import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TASK_LABEL.
 */
public class TaskLabel implements java.io.Serializable {

    private Long id;
    private Long TaskId;
    private Long LabelId;
    private Boolean IsVirtual;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskLabelDao myDao;

    private Task task;
    private Long task__resolvedKey;

    private Label label;
    private Long label__resolvedKey;


    public TaskLabel() {
    }

    public TaskLabel(Long id) {
        this.id = id;
    }

    public TaskLabel(Long id, Long TaskId, Long LabelId, Boolean IsVirtual) {
        this.id = id;
        this.TaskId = TaskId;
        this.LabelId = LabelId;
        this.IsVirtual = IsVirtual;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskLabelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getTaskId() {
        return TaskId;
    }

    public void setTaskId(Long TaskId) {
        this.TaskId = TaskId;
    }

    public Long getLabelId() {
        return LabelId;
    }

    public void setLabelId(Long LabelId) {
        this.LabelId = LabelId;
    }

    public Boolean getIsVirtual() {
        return IsVirtual;
    }

    public void setIsVirtual(Boolean IsVirtual) {
        this.IsVirtual = IsVirtual;
    }

    /** To-one relationship, resolved on first access. */
    public Task getTask() {
        Long __key = this.TaskId;
        if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task taskNew = targetDao.load(__key);
            synchronized (this) {
                task = taskNew;
            	task__resolvedKey = __key;
            }
        }
        return task;
    }

    public void setTask(Task task) {
        synchronized (this) {
            this.task = task;
            TaskId = task == null ? null : task.getId();
            task__resolvedKey = TaskId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Label getLabel() {
        Long __key = this.LabelId;
        if (label__resolvedKey == null || !label__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            Label labelNew = targetDao.load(__key);
            synchronized (this) {
                label = labelNew;
            	label__resolvedKey = __key;
            }
        }
        return label;
    }

    public void setLabel(Label label) {
        synchronized (this) {
            this.label = label;
            LabelId = label == null ? null : label.getId();
            label__resolvedKey = LabelId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
