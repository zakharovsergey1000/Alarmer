package biz.advancedcalendar.greendao;

import biz.advancedcalendar.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table WORK_GROUP_MEMBER.
 */
public class WorkGroupMember implements java.io.Serializable {

    private Long id;
    private Long LocalWorkGroupId;
    private long LocalCreateDateTime;
    private long LocalChangeDateTime;
    private Long MemberId;
    private Long GroupId;
    private Long UserId;
    private Long UserInCompanyId;
    private Byte State;
    private Byte Role;
    private Long JoinDate;
    private Long LastReadMsg;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkGroupMemberDao myDao;

    private WorkGroup workGroup;
    private Long workGroup__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public WorkGroupMember() {
    }

    public WorkGroupMember(Long id) {
        this.id = id;
    }

    public WorkGroupMember(Long id, Long LocalWorkGroupId, long LocalCreateDateTime, long LocalChangeDateTime, Long MemberId, Long GroupId, Long UserId, Long UserInCompanyId, Byte State, Byte Role, Long JoinDate, Long LastReadMsg) {
        this.id = id;
        this.LocalWorkGroupId = LocalWorkGroupId;
        this.LocalCreateDateTime = LocalCreateDateTime;
        this.LocalChangeDateTime = LocalChangeDateTime;
        this.MemberId = MemberId;
        this.GroupId = GroupId;
        this.UserId = UserId;
        this.UserInCompanyId = UserInCompanyId;
        this.State = State;
        this.Role = Role;
        this.JoinDate = JoinDate;
        this.LastReadMsg = LastReadMsg;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkGroupMemberDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getLocalWorkGroupId() {
        return LocalWorkGroupId;
    }

    public void setLocalWorkGroupId(Long LocalWorkGroupId) {
        this.LocalWorkGroupId = LocalWorkGroupId;
    }

    public long getLocalCreateDateTime() {
        return LocalCreateDateTime;
    }

    public void setLocalCreateDateTime(long LocalCreateDateTime) {
        this.LocalCreateDateTime = LocalCreateDateTime;
    }

    public long getLocalChangeDateTime() {
        return LocalChangeDateTime;
    }

    public void setLocalChangeDateTime(long LocalChangeDateTime) {
        this.LocalChangeDateTime = LocalChangeDateTime;
    }

    public Long getMemberId() {
        return MemberId;
    }

    public void setMemberId(Long MemberId) {
        this.MemberId = MemberId;
    }

    public Long getGroupId() {
        return GroupId;
    }

    public void setGroupId(Long GroupId) {
        this.GroupId = GroupId;
    }

    public Long getUserId() {
        return UserId;
    }

    public void setUserId(Long UserId) {
        this.UserId = UserId;
    }

    public Long getUserInCompanyId() {
        return UserInCompanyId;
    }

    public void setUserInCompanyId(Long UserInCompanyId) {
        this.UserInCompanyId = UserInCompanyId;
    }

    public Byte getState() {
        return State;
    }

    public void setState(Byte State) {
        this.State = State;
    }

    public Byte getRole() {
        return Role;
    }

    public void setRole(Byte Role) {
        this.Role = Role;
    }

    public Long getJoinDate() {
        return JoinDate;
    }

    public void setJoinDate(Long JoinDate) {
        this.JoinDate = JoinDate;
    }

    public Long getLastReadMsg() {
        return LastReadMsg;
    }

    public void setLastReadMsg(Long LastReadMsg) {
        this.LastReadMsg = LastReadMsg;
    }

    /** To-one relationship, resolved on first access. */
    public WorkGroup getWorkGroup() {
        Long __key = this.LocalWorkGroupId;
        if (workGroup__resolvedKey == null || !workGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkGroupDao targetDao = daoSession.getWorkGroupDao();
            WorkGroup workGroupNew = targetDao.load(__key);
            synchronized (this) {
                workGroup = workGroupNew;
            	workGroup__resolvedKey = __key;
            }
        }
        return workGroup;
    }

    public void setWorkGroup(WorkGroup workGroup) {
        synchronized (this) {
            this.workGroup = workGroup;
            LocalWorkGroupId = workGroup == null ? null : workGroup.getId();
            workGroup__resolvedKey = LocalWorkGroupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
