package biz.advancedcalendar.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import biz.advancedcalendar.greendao.File;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FILE.
*/
public class FileDao extends AbstractDao<File, Long> {

    public static final String TABLENAME = "FILE";

    /**
     * Properties of entity File.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalCreateDateTime = new Property(1, long.class, "LocalCreateDateTime", false, "LOCAL_CREATE_DATE_TIME");
        public final static Property LocalChangeDateTime = new Property(2, long.class, "LocalChangeDateTime", false, "LOCAL_CHANGE_DATE_TIME");
        public final static Property SyncStatus = new Property(3, Byte.class, "SyncStatus", false, "SYNC_STATUS");
        public final static Property LocalPath = new Property(4, String.class, "LocalPath", false, "LOCAL_PATH");
        public final static Property LocalId = new Property(5, Long.class, "LocalId", false, "LOCAL_ID");
        public final static Property LocalVersionId = new Property(6, Long.class, "LocalVersionId", false, "LOCAL_VERSION_ID");
        public final static Property ServerId = new Property(7, Long.class, "ServerId", false, "SERVER_ID");
        public final static Property VersionId = new Property(8, Long.class, "VersionId", false, "VERSION_ID");
        public final static Property Href = new Property(9, String.class, "Href", false, "HREF");
        public final static Property UID = new Property(10, String.class, "UID", false, "UID");
        public final static Property UserName = new Property(11, String.class, "UserName", false, "USER_NAME");
        public final static Property FileName = new Property(12, String.class, "FileName", false, "FILE_NAME");
        public final static Property ContentType = new Property(13, String.class, "ContentType", false, "CONTENT_TYPE");
        public final static Property Size = new Property(14, Long.class, "Size", false, "SIZE");
        public final static Property Description = new Property(15, String.class, "Description", false, "DESCRIPTION");
        public final static Property FileServerId = new Property(16, long.class, "FileServerId", false, "FILE_SERVER_ID");
        public final static Property Created = new Property(17, Long.class, "Created", false, "CREATED");
        public final static Property Deleted = new Property(18, boolean.class, "Deleted", false, "DELETED");
        public final static Property EnableVersions = new Property(19, boolean.class, "EnableVersions", false, "ENABLE_VERSIONS");
        public final static Property Path = new Property(20, String.class, "Path", false, "PATH");
    };

    private DaoSession daoSession;


    public FileDao(DaoConfig config) {
        super(config);
    }
    
    public FileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FILE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_CREATE_DATE_TIME' INTEGER NOT NULL ," + // 1: LocalCreateDateTime
                "'LOCAL_CHANGE_DATE_TIME' INTEGER NOT NULL ," + // 2: LocalChangeDateTime
                "'SYNC_STATUS' INTEGER," + // 3: SyncStatus
                "'LOCAL_PATH' TEXT," + // 4: LocalPath
                "'LOCAL_ID' INTEGER," + // 5: LocalId
                "'LOCAL_VERSION_ID' INTEGER," + // 6: LocalVersionId
                "'SERVER_ID' INTEGER," + // 7: ServerId
                "'VERSION_ID' INTEGER," + // 8: VersionId
                "'HREF' TEXT," + // 9: Href
                "'UID' TEXT," + // 10: UID
                "'USER_NAME' TEXT," + // 11: UserName
                "'FILE_NAME' TEXT," + // 12: FileName
                "'CONTENT_TYPE' TEXT," + // 13: ContentType
                "'SIZE' INTEGER," + // 14: Size
                "'DESCRIPTION' TEXT," + // 15: Description
                "'FILE_SERVER_ID' INTEGER NOT NULL ," + // 16: FileServerId
                "'CREATED' INTEGER," + // 17: Created
                "'DELETED' INTEGER NOT NULL ," + // 18: Deleted
                "'ENABLE_VERSIONS' INTEGER NOT NULL ," + // 19: EnableVersions
                "'PATH' TEXT);"); // 20: Path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, File entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalCreateDateTime());
        stmt.bindLong(3, entity.getLocalChangeDateTime());
 
        Byte SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(4, SyncStatus);
        }
 
        String LocalPath = entity.getLocalPath();
        if (LocalPath != null) {
            stmt.bindString(5, LocalPath);
        }
 
        Long LocalId = entity.getLocalId();
        if (LocalId != null) {
            stmt.bindLong(6, LocalId);
        }
 
        Long LocalVersionId = entity.getLocalVersionId();
        if (LocalVersionId != null) {
            stmt.bindLong(7, LocalVersionId);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(8, ServerId);
        }
 
        Long VersionId = entity.getVersionId();
        if (VersionId != null) {
            stmt.bindLong(9, VersionId);
        }
 
        String Href = entity.getHref();
        if (Href != null) {
            stmt.bindString(10, Href);
        }
 
        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(11, UID);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(12, UserName);
        }
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(13, FileName);
        }
 
        String ContentType = entity.getContentType();
        if (ContentType != null) {
            stmt.bindString(14, ContentType);
        }
 
        Long Size = entity.getSize();
        if (Size != null) {
            stmt.bindLong(15, Size);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(16, Description);
        }
        stmt.bindLong(17, entity.getFileServerId());
 
        Long Created = entity.getCreated();
        if (Created != null) {
            stmt.bindLong(18, Created);
        }
        stmt.bindLong(19, entity.getDeleted() ? 1l: 0l);
        stmt.bindLong(20, entity.getEnableVersions() ? 1l: 0l);
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(21, Path);
        }
    }

    @Override
    protected void attachEntity(File entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public File readEntity(Cursor cursor, int offset) {
        File entity = new File( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // LocalCreateDateTime
            cursor.getLong(offset + 2), // LocalChangeDateTime
            cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3), // SyncStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LocalPath
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // LocalId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // LocalVersionId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // ServerId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // VersionId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Href
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UserName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FileName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ContentType
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // Size
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Description
            cursor.getLong(offset + 16), // FileServerId
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // Created
            cursor.getShort(offset + 18) != 0, // Deleted
            cursor.getShort(offset + 19) != 0, // EnableVersions
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // Path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, File entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalCreateDateTime(cursor.getLong(offset + 1));
        entity.setLocalChangeDateTime(cursor.getLong(offset + 2));
        entity.setSyncStatus(cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3));
        entity.setLocalPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLocalVersionId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setServerId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setVersionId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setHref(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFileName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContentType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSize(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setDescription(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFileServerId(cursor.getLong(offset + 16));
        entity.setCreated(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setDeleted(cursor.getShort(offset + 18) != 0);
        entity.setEnableVersions(cursor.getShort(offset + 19) != 0);
        entity.setPath(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(File entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(File entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
